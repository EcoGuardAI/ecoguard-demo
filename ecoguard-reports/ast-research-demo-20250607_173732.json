{
  "file_path": "ast_showcase.py",
  "analysis_time": "2025-06-07T21:37:33.642846+00:00",
  "summary": {
    "total_issues": 19,
    "critical": 0,
    "error": 0,
    "warning": 7,
    "info": 12,
    "green_score": 55.0,
    "security_score": 100.0
  },
  "issues": [
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "ast_showcase.py",
      "line": 35,
      "column": 19,
      "end_line": 35,
      "end_column": 23,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.630590+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "ast_showcase.py",
      "line": 50,
      "column": 19,
      "end_line": 50,
      "end_column": 23,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.630952+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "ast_showcase.py",
      "line": 61,
      "column": 28,
      "end_line": 61,
      "end_column": 32,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.631117+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'content' is defined but never used",
      "file_path": "ast_showcase.py",
      "line": 122,
      "column": 8,
      "end_line": 122,
      "end_column": 15,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'content' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _content",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.631439+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'func' is defined but never used",
      "file_path": "ast_showcase.py",
      "line": 160,
      "column": 24,
      "end_line": 160,
      "end_column": 28,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'func' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _func",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.631506+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'os' is not used",
      "file_path": "ast_showcase.py",
      "line": 6,
      "column": 0,
      "end_line": 6,
      "end_column": 9,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'os'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.632527+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'sys' is not used",
      "file_path": "ast_showcase.py",
      "line": 7,
      "column": 0,
      "end_line": 7,
      "end_column": 10,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'sys'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.632533+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'json' is not used",
      "file_path": "ast_showcase.py",
      "line": 8,
      "column": 0,
      "end_line": 8,
      "end_column": 11,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'json'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.632537+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'itertools' is not used",
      "file_path": "ast_showcase.py",
      "line": 9,
      "column": 0,
      "end_line": 9,
      "end_column": 16,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'itertools'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.632540+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'defaultdict' is not used",
      "file_path": "ast_showcase.py",
      "line": 11,
      "column": 0,
      "end_line": 11,
      "end_column": 44,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'defaultdict'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.632544+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'Counter' is not used",
      "file_path": "ast_showcase.py",
      "line": 11,
      "column": 0,
      "end_line": 11,
      "end_column": 44,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'Counter'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.632549+00:00"
    },
    {
      "rule_id": "inefficient_string_concat",
      "category": "green",
      "severity": "warning",
      "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
      "file_path": "ast_showcase.py",
      "line": 148,
      "column": 8,
      "end_line": 148,
      "end_column": 20,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use ''.join() for concatenating strings in loops",
        "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.15,
        "security_risk": 0.0,
        "carbon_impact": 5.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Inefficient String Concatenation",
      "rule_description": "String concatenation in loop is inefficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.636773+00:00"
    },
    {
      "rule_id": "inefficient_string_concat",
      "category": "green",
      "severity": "warning",
      "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
      "file_path": "ast_showcase.py",
      "line": 150,
      "column": 12,
      "end_line": 150,
      "end_column": 29,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use ''.join() for concatenating strings in loops",
        "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.15,
        "security_risk": 0.0,
        "carbon_impact": 5.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Inefficient String Concatenation",
      "rule_description": "String concatenation in loop is inefficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.636792+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "ast_showcase.py",
      "line": 59,
      "column": 15,
      "end_line": 59,
      "end_column": 73,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.637767+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "ast_showcase.py",
      "line": 89,
      "column": 18,
      "end_line": 89,
      "end_column": 77,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.637890+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "ast_showcase.py",
      "line": 101,
      "column": 24,
      "end_line": 105,
      "end_column": 5,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.637939+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "ast_showcase.py",
      "line": 102,
      "column": 8,
      "end_line": 102,
      "end_column": 59,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.637942+00:00"
    },
    {
      "rule_id": "file_handling_efficiency",
      "category": "green",
      "severity": "info",
      "message": "Use 'with open()' for automatic file closing",
      "file_path": "ast_showcase.py",
      "line": 119,
      "column": 13,
      "end_line": 119,
      "end_column": 37,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use context manager (with statement) for file handling",
        "replacement_code": "# with open(filename) as f:",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.05,
        "security_risk": 0.0,
        "carbon_impact": 1.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "File Handling Efficiency",
      "rule_description": "File handling could be more efficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.638634+00:00"
    },
    {
      "rule_id": "verbose_ai_code",
      "category": "ai_code",
      "severity": "info",
      "message": "Redundant nested if statements can be combined with 'and'",
      "file_path": "ast_showcase.py",
      "line": 74,
      "column": 20,
      "end_line": 76,
      "end_column": 46,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Combine conditions with 'and' operator",
        "replacement_code": "# if condition1 and condition2:",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.05,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": 0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Verbose AI-Generated Code",
      "rule_description": "Code pattern appears verbose and could be simplified",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:37:33.639749+00:00"
    }
  ],
  "metadata": {
    "file_path": "ast_showcase.py",
    "file_size": 6308,
    "line_count": 232,
    "ast_research": {
      "patterns": {
        "function_def": [
          "ASTNodeInfo(node_type='FunctionDef', line=23, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'is_adult', 'param_count': 1, 'body_length': 1}, context='class:Person')",
          "ASTNodeInfo(node_type='FunctionDef', line=30, column=4, parent_type='ClassDef', children_count=3, attributes={'name': '__init__', 'param_count': 3, 'body_length': 2}, context='class:Animal')",
          "ASTNodeInfo(node_type='FunctionDef', line=35, column=4, parent_type='ClassDef', children_count=4, attributes={'name': 'make_sound', 'param_count': 1, 'body_length': 1}, context='class:Animal')",
          "ASTNodeInfo(node_type='FunctionDef', line=38, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'describe', 'param_count': 1, 'body_length': 1}, context='class:Animal')",
          "ASTNodeInfo(node_type='FunctionDef', line=45, column=4, parent_type='ClassDef', children_count=4, attributes={'name': '__init__', 'param_count': 3, 'body_length': 3}, context='class:Dog')",
          "ASTNodeInfo(node_type='FunctionDef', line=50, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'make_sound', 'param_count': 1, 'body_length': 1}, context='class:Dog')",
          "ASTNodeInfo(node_type='FunctionDef', line=53, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'learn_trick', 'param_count': 2, 'body_length': 1}, context='class:Dog')",
          "ASTNodeInfo(node_type='FunctionDef', line=57, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'perform_tricks', 'param_count': 1, 'body_length': 1}, context='class:Dog')",
          "ASTNodeInfo(node_type='FunctionDef', line=61, column=4, parent_type='ClassDef', children_count=7, attributes={'name': 'complex_calculation', 'param_count': 2, 'body_length': 5}, context='class:Dog')",
          "ASTNodeInfo(node_type='FunctionDef', line=84, column=0, parent_type='Module', children_count=7, attributes={'name': 'functional_programming_example', 'param_count': 1, 'body_length': 5}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=114, column=0, parent_type='Module', children_count=8, attributes={'name': 'async_patterns_showcase', 'param_count': 0, 'body_length': 7}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=157, column=0, parent_type='Module', children_count=5, attributes={'name': 'decorator_examples', 'param_count': 0, 'body_length': 4}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=160, column=4, parent_type='FunctionDef', children_count=4, attributes={'name': 'timer_decorator', 'param_count': 1, 'body_length': 3}, context='function:decorator_examples')",
          "ASTNodeInfo(node_type='FunctionDef', line=162, column=8, parent_type='FunctionDef', children_count=7, attributes={'name': 'wrapper', 'param_count': 0, 'body_length': 6}, context='function:timer_decorator')",
          "ASTNodeInfo(node_type='FunctionDef', line=172, column=4, parent_type='FunctionDef', children_count=5, attributes={'name': 'slow_function', 'param_count': 0, 'body_length': 3}, context='function:decorator_examples')",
          "ASTNodeInfo(node_type='FunctionDef', line=190, column=0, parent_type='Module', children_count=17, attributes={'name': 'main', 'param_count': 0, 'body_length': 16}, context='module')"
        ],
        "class_def": [
          "ASTNodeInfo(node_type='ClassDef', line=17, column=0, parent_type='Module', children_count=6, attributes={'name': 'Person', 'body_length': 5}, context='module')",
          "ASTNodeInfo(node_type='ClassDef', line=27, column=0, parent_type='Module', children_count=5, attributes={'name': 'Animal', 'body_length': 4}, context='module')",
          "ASTNodeInfo(node_type='ClassDef', line=42, column=0, parent_type='Module', children_count=7, attributes={'name': 'Dog', 'body_length': 6}, context='module')"
        ],
        "import": [
          "ASTNodeInfo(node_type='Import', line=6, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=7, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=8, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=9, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=10, column=0, parent_type='Module', children_count=4, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=11, column=0, parent_type='Module', children_count=2, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=12, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=13, column=0, parent_type='Module', children_count=2, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=163, column=12, parent_type='FunctionDef', children_count=1, attributes={}, context='function:wrapper')",
          "ASTNodeInfo(node_type='Import', line=173, column=8, parent_type='FunctionDef', children_count=1, attributes={}, context='function:slow_function')"
        ],
        "loop": [
          "ASTNodeInfo(node_type='For', line=66, column=8, parent_type='FunctionDef', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='function:complex_calculation')",
          "ASTNodeInfo(node_type='For', line=67, column=12, parent_type='For', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='control_flow:for')",
          "ASTNodeInfo(node_type='For', line=137, column=4, parent_type='FunctionDef', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='function:async_patterns_showcase')",
          "ASTNodeInfo(node_type='While', line=147, column=4, parent_type='FunctionDef', children_count=3, attributes={'body_length': 2, 'has_else': False}, context='function:async_patterns_showcase')"
        ],
        "comprehension": [
          "ASTNodeInfo(node_type='ListComp', line=59, column=15, parent_type='Return', children_count=2, attributes={}, context='return')",
          "ASTNodeInfo(node_type='DictComp', line=88, column=18, parent_type='Assign', children_count=3, attributes={}, context='assign')",
          "ASTNodeInfo(node_type='ListComp', line=89, column=18, parent_type='DictComp', children_count=2, attributes={}, context='dictcomp')",
          "ASTNodeInfo(node_type='SetComp', line=90, column=24, parent_type='comprehension', children_count=2, attributes={}, context='comprehension')",
          "ASTNodeInfo(node_type='ListComp', line=101, column=24, parent_type='Assign', children_count=2, attributes={}, context='assign')",
          "ASTNodeInfo(node_type='ListComp', line=102, column=8, parent_type='ListComp', children_count=2, attributes={}, context='listcomp')"
        ]
      },
      "complexity_metrics": {
        "cyclomatic": 18,
        "max_nesting": 4
      },
      "max_depth": 12,
      "node_type_counts": {
        "Module": 1,
        "Expr": 26,
        "Constant": 148,
        "Import": 6,
        "alias": 15,
        "ImportFrom": 4,
        "ClassDef": 3,
        "AnnAssign": 3,
        "Name": 202,
        "Store": 49,
        "Load": 212,
        "Subscript": 15,
        "FunctionDef": 16,
        "arguments": 16,
        "arg": 19,
        "Return": 12,
        "Compare": 16,
        "Attribute": 30,
        "GtE": 2,
        "Assign": 27,
        "Pass": 1,
        "JoinedStr": 11,
        "FormattedValue": 14,
        "Call": 47,
        "List": 8,
        "If": 10,
        "NotIn": 1,
        "ListComp": 4,
        "comprehension": 7,
        "Dict": 8,
        "For": 3,
        "Tuple": 5,
        "BinOp": 10,
        "Mod": 3,
        "Eq": 5,
        "AugAssign": 6,
        "Add": 4,
        "Gt": 6,
        "Mult": 3,
        "FloorDiv": 2,
        "Div": 2,
        "DictComp": 1,
        "SetComp": 1,
        "GeneratorExp": 1,
        "Try": 2,
        "With": 1,
        "withitem": 1,
        "ExceptHandler": 3,
        "UnaryOp": 1,
        "USub": 1,
        "Lt": 2,
        "Continue": 1,
        "Break": 1,
        "While": 1,
        "BoolOp": 1,
        "And": 1,
        "Sub": 2,
        "Starred": 1,
        "keyword": 1
      }
    }
  }
}