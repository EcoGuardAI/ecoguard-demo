{
  "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
  "analysis_time": "2025-06-07T21:39:08.955098+00:00",
  "summary": {
    "total_issues": 40,
    "critical": 0,
    "error": 0,
    "warning": 17,
    "info": 23,
    "green_score": 60.0,
    "security_score": 100.0
  },
  "issues": [
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 26,
      "column": 16,
      "end_line": 26,
      "end_column": 20,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.937609+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'query' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 26,
      "column": 22,
      "end_line": 26,
      "end_column": 32,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'query' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _query",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.937796+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'params' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 26,
      "column": 34,
      "end_line": 26,
      "end_column": 47,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'params' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _params",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.937802+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 27,
      "column": 17,
      "end_line": 27,
      "end_column": 21,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.937826+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 28,
      "column": 14,
      "end_line": 28,
      "end_column": 18,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.937839+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 62,
      "column": 22,
      "end_line": 62,
      "end_column": 26,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938032+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'func' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 88,
      "column": 18,
      "end_line": 88,
      "end_column": 40,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'func' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _func",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938207+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'retries' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 85,
      "column": 31,
      "end_line": 85,
      "end_column": 43,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'retries' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _retries",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938214+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'delay' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 85,
      "column": 49,
      "end_line": 85,
      "end_column": 61,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'delay' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _delay",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938216+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'DATABASE_PASSWORD' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 222,
      "column": 4,
      "end_line": 222,
      "end_column": 21,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'DATABASE_PASSWORD' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _DATABASE_PASSWORD",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938555+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 252,
      "column": 19,
      "end_line": 252,
      "end_column": 23,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938618+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 255,
      "column": 19,
      "end_line": 255,
      "end_column": 23,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938641+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'multiplier' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 263,
      "column": 23,
      "end_line": 263,
      "end_column": 38,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'multiplier' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _multiplier",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.938704+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'ast' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 6,
      "column": 0,
      "end_line": 6,
      "end_column": 10,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'ast'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939937+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 're' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 7,
      "column": 0,
      "end_line": 7,
      "end_column": 9,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 're'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939941+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'hashlib' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 8,
      "column": 0,
      "end_line": 8,
      "end_column": 14,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'hashlib'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939944+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'sqlite3' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 9,
      "column": 0,
      "end_line": 9,
      "end_column": 14,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'sqlite3'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939947+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'subprocess' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 10,
      "column": 0,
      "end_line": 10,
      "end_column": 17,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'subprocess'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939950+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'Path' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 11,
      "column": 0,
      "end_line": 11,
      "end_column": 24,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'Path'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939952+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'reduce' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 12,
      "column": 0,
      "end_line": 12,
      "end_column": 44,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'reduce'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939955+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'partial' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 12,
      "column": 0,
      "end_line": 12,
      "end_column": 44,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'partial'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939958+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'ThreadPoolExecutor' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 13,
      "column": 0,
      "end_line": 13,
      "end_column": 63,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'ThreadPoolExecutor'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939960+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'as_completed' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 13,
      "column": 0,
      "end_line": 13,
      "end_column": 63,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'as_completed'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939963+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'Optional' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 14,
      "column": 0,
      "end_line": 17,
      "end_column": 1,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'Optional'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939966+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'Union' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 14,
      "column": 0,
      "end_line": 17,
      "end_column": 1,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'Union'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939968+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'Set' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 14,
      "column": 0,
      "end_line": 17,
      "end_column": 1,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'Set'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.939971+00:00"
    },
    {
      "rule_id": "function_complexity",
      "category": "quality",
      "severity": "warning",
      "message": "Function 'advanced_decorator_factory' has complexity 14 (max: 10)",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 85,
      "column": 0,
      "end_line": 127,
      "end_column": 20,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Consider breaking this function into smaller functions",
        "replacement_code": "# Refactor into smaller, more focused functions",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.3,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.8,
        "cost_impact": 0.0
      },
      "rule_name": "High Function Complexity",
      "rule_description": "Function has high cyclomatic complexity",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.940635+00:00"
    },
    {
      "rule_id": "function_complexity",
      "category": "quality",
      "severity": "warning",
      "message": "Function 'decorator' has complexity 14 (max: 10)",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 88,
      "column": 4,
      "end_line": 126,
      "end_column": 22,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Consider breaking this function into smaller functions",
        "replacement_code": "# Refactor into smaller, more focused functions",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.3,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.8,
        "cost_impact": 0.0
      },
      "rule_name": "High Function Complexity",
      "rule_description": "Function has high cyclomatic complexity",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.940823+00:00"
    },
    {
      "rule_id": "function_complexity",
      "category": "quality",
      "severity": "warning",
      "message": "Function 'wrapper' has complexity 14 (max: 10)",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 90,
      "column": 8,
      "end_line": 124,
      "end_column": 65,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Consider breaking this function into smaller functions",
        "replacement_code": "# Refactor into smaller, more focused functions",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.3,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.8,
        "cost_impact": 0.0
      },
      "rule_name": "High Function Complexity",
      "rule_description": "Function has high cyclomatic complexity",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.940992+00:00"
    },
    {
      "rule_id": "function_complexity",
      "category": "quality",
      "severity": "warning",
      "message": "Function 'complex_data_processor' has complexity 12 (max: 10)",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 131,
      "column": 0,
      "end_line": 204,
      "end_column": 5,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Consider breaking this function into smaller functions",
        "replacement_code": "# Refactor into smaller, more focused functions",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.3,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.8,
        "cost_impact": 0.0
      },
      "rule_name": "High Function Complexity",
      "rule_description": "Function has high cyclomatic complexity",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.941402+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 112,
      "column": 31,
      "end_line": 112,
      "end_column": 76,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947240+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 136,
      "column": 18,
      "end_line": 152,
      "end_column": 9,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947314+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 144,
      "column": 24,
      "end_line": 148,
      "end_column": 17,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947344+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 256,
      "column": 15,
      "end_line": 256,
      "end_column": 54,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947661+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 274,
      "column": 19,
      "end_line": 274,
      "end_column": 86,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947713+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 283,
      "column": 29,
      "end_line": 283,
      "end_column": 61,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947739+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 284,
      "column": 25,
      "end_line": 284,
      "end_column": 61,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.947749+00:00"
    },
    {
      "rule_id": "file_handling_efficiency",
      "category": "green",
      "severity": "info",
      "message": "Use 'with open()' for automatic file closing",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 226,
      "column": 13,
      "end_line": 226,
      "end_column": 42,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use context manager (with statement) for file handling",
        "replacement_code": "# with open(filename) as f:",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.05,
        "security_risk": 0.0,
        "carbon_impact": 1.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "File Handling Efficiency",
      "rule_description": "File handling could be more efficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.948609+00:00"
    },
    {
      "rule_id": "redundant_variable",
      "category": "ai_code",
      "severity": "info",
      "message": "Variable 'query' is assigned and immediately returned",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 212,
      "column": 8,
      "end_line": 212,
      "end_column": 59,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Return the expression directly without intermediate variable",
        "replacement_code": "# return expression",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.02,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": 0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Redundant Variable Assignment",
      "rule_description": "Variable assignment is redundant",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.951659+00:00"
    },
    {
      "rule_id": "redundant_variable",
      "category": "ai_code",
      "severity": "info",
      "message": "Variable 'command' is assigned and immediately returned",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
      "line": 217,
      "column": 8,
      "end_line": 217,
      "end_column": 35,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Return the expression directly without intermediate variable",
        "replacement_code": "# return expression",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.02,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": 0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Redundant Variable Assignment",
      "rule_description": "Variable assignment is redundant",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.951679+00:00"
    }
  ],
  "metadata": {
    "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/complex_patterns.py",
    "file_size": 11469,
    "line_count": 333,
    "ast_research": {
      "patterns": {
        "function_def": [
          "ASTNodeInfo(node_type='FunctionDef', line=26, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'execute', 'param_count': 3, 'body_length': 1}, context='class:DatabaseConnection')",
          "ASTNodeInfo(node_type='FunctionDef', line=27, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'fetchall', 'param_count': 1, 'body_length': 1}, context='class:DatabaseConnection')",
          "ASTNodeInfo(node_type='FunctionDef', line=28, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'close', 'param_count': 1, 'body_length': 1}, context='class:DatabaseConnection')",
          "ASTNodeInfo(node_type='FunctionDef', line=34, column=4, parent_type='ClassDef', children_count=5, attributes={'name': '__init__', 'param_count': 3, 'body_length': 4}, context='class:ComplexGenericClass')",
          "ASTNodeInfo(node_type='FunctionDef', line=40, column=4, parent_type='ClassDef', children_count=5, attributes={'name': 'add_processor', 'param_count': 2, 'body_length': 3}, context='class:ComplexGenericClass')",
          "ASTNodeInfo(node_type='FunctionDef', line=45, column=4, parent_type='ClassDef', children_count=4, attributes={'name': 'process_items', 'param_count': 1, 'body_length': 2}, context='class:ComplexGenericClass')",
          "ASTNodeInfo(node_type='FunctionDef', line=62, column=4, parent_type='ClassDef', children_count=5, attributes={'name': '_should_yield', 'param_count': 2, 'body_length': 3}, context='class:ComplexGenericClass')",
          "ASTNodeInfo(node_type='FunctionDef', line=85, column=0, parent_type='Module', children_count=4, attributes={'name': 'advanced_decorator_factory', 'param_count': 2, 'body_length': 3}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=88, column=4, parent_type='FunctionDef', children_count=4, attributes={'name': 'decorator', 'param_count': 1, 'body_length': 2}, context='function:advanced_decorator_factory')",
          "ASTNodeInfo(node_type='FunctionDef', line=90, column=8, parent_type='FunctionDef', children_count=6, attributes={'name': 'wrapper', 'param_count': 0, 'body_length': 3}, context='function:decorator')",
          "ASTNodeInfo(node_type='FunctionDef', line=131, column=0, parent_type='Module', children_count=8, attributes={'name': 'complex_data_processor', 'param_count': 1, 'body_length': 5}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=207, column=0, parent_type='Module', children_count=8, attributes={'name': 'potential_security_issues', 'param_count': 0, 'body_length': 7}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=211, column=4, parent_type='FunctionDef', children_count=4, attributes={'name': 'unsafe_query', 'param_count': 1, 'body_length': 2}, context='function:potential_security_issues')",
          "ASTNodeInfo(node_type='FunctionDef', line=216, column=4, parent_type='FunctionDef', children_count=4, attributes={'name': 'unsafe_command', 'param_count': 1, 'body_length': 2}, context='function:potential_security_issues')",
          "ASTNodeInfo(node_type='FunctionDef', line=225, column=4, parent_type='FunctionDef', children_count=3, attributes={'name': 'read_file', 'param_count': 1, 'body_length': 1}, context='function:potential_security_issues')",
          "ASTNodeInfo(node_type='FunctionDef', line=240, column=4, parent_type='ClassDef', children_count=3, attributes={'name': '__new__', 'param_count': 4, 'body_length': 2}, context='class:MetaclassExample')",
          "ASTNodeInfo(node_type='FunctionDef', line=252, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'method_one', 'param_count': 2, 'body_length': 1}, context='class:AutoDecoratedClass')",
          "ASTNodeInfo(node_type='FunctionDef', line=255, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'method_two', 'param_count': 2, 'body_length': 1}, context='class:AutoDecoratedClass')",
          "ASTNodeInfo(node_type='FunctionDef', line=259, column=0, parent_type='Module', children_count=9, attributes={'name': 'complex_async_simulation', 'param_count': 0, 'body_length': 8}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=263, column=4, parent_type='FunctionDef', children_count=3, attributes={'name': 'outer_function', 'param_count': 1, 'body_length': 2}, context='function:complex_async_simulation')",
          "ASTNodeInfo(node_type='FunctionDef', line=264, column=8, parent_type='FunctionDef', children_count=3, attributes={'name': 'middle_function', 'param_count': 1, 'body_length': 2}, context='function:outer_function')",
          "ASTNodeInfo(node_type='FunctionDef', line=265, column=12, parent_type='FunctionDef', children_count=3, attributes={'name': 'inner_function', 'param_count': 1, 'body_length': 1}, context='function:middle_function')",
          "ASTNodeInfo(node_type='FunctionDef', line=281, column=4, parent_type='FunctionDef', children_count=5, attributes={'name': 'static_processor', 'param_count': 1, 'body_length': 1}, context='function:complex_async_simulation')"
        ],
        "class_def": [
          "ASTNodeInfo(node_type='ClassDef', line=24, column=0, parent_type='Module', children_count=5, attributes={'name': 'DatabaseConnection', 'body_length': 4}, context='module')",
          "ASTNodeInfo(node_type='ClassDef', line=31, column=0, parent_type='Module', children_count=6, attributes={'name': 'ComplexGenericClass', 'body_length': 5}, context='module')",
          "ASTNodeInfo(node_type='ClassDef', line=237, column=0, parent_type='Module', children_count=3, attributes={'name': 'MetaclassExample', 'body_length': 2}, context='module')",
          "ASTNodeInfo(node_type='ClassDef', line=249, column=0, parent_type='Module', children_count=4, attributes={'name': 'AutoDecoratedClass', 'body_length': 3}, context='module')"
        ],
        "import": [
          "ASTNodeInfo(node_type='Import', line=6, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=7, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=8, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=9, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=10, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=11, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=12, column=0, parent_type='Module', children_count=3, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=13, column=0, parent_type='Module', children_count=2, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=14, column=0, parent_type='Module', children_count=10, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=119, column=24, parent_type='If', children_count=1, attributes={}, context='control_flow:if')"
        ],
        "loop": [
          "ASTNodeInfo(node_type='For', line=47, column=8, parent_type='FunctionDef', children_count=5, attributes={'body_length': 3, 'has_else': False}, context='function:process_items')",
          "ASTNodeInfo(node_type='For', line=51, column=12, parent_type='For', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='control_flow:for')",
          "ASTNodeInfo(node_type='For', line=93, column=12, parent_type='FunctionDef', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='function:wrapper')",
          "ASTNodeInfo(node_type='For', line=97, column=20, parent_type='Try', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='exception_handling')",
          "ASTNodeInfo(node_type='For', line=162, column=4, parent_type='FunctionDef', children_count=6, attributes={'body_length': 4, 'has_else': False}, context='function:complex_data_processor')",
          "ASTNodeInfo(node_type='For', line=171, column=8, parent_type='For', children_count=7, attributes={'body_length': 5, 'has_else': False}, context='control_flow:for')",
          "ASTNodeInfo(node_type='For', line=177, column=12, parent_type='For', children_count=4, attributes={'body_length': 2, 'has_else': False}, context='control_flow:for')",
          "ASTNodeInfo(node_type='For', line=242, column=8, parent_type='FunctionDef', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='function:__new__')"
        ],
        "comprehension": [
          "ASTNodeInfo(node_type='DictComp', line=110, column=31, parent_type='Return', children_count=3, attributes={}, context='return')",
          "ASTNodeInfo(node_type='ListComp', line=112, column=31, parent_type='Return', children_count=2, attributes={}, context='return')",
          "ASTNodeInfo(node_type='DictComp', line=135, column=23, parent_type='Assign', children_count=3, attributes={}, context='assign')",
          "ASTNodeInfo(node_type='ListComp', line=136, column=18, parent_type='DictComp', children_count=2, attributes={}, context='dictcomp')",
          "ASTNodeInfo(node_type='ListComp', line=144, column=24, parent_type='Dict', children_count=2, attributes={}, context='dict')",
          "ASTNodeInfo(node_type='SetComp', line=153, column=24, parent_type='comprehension', children_count=2, attributes={}, context='comprehension')",
          "ASTNodeInfo(node_type='ListComp', line=256, column=15, parent_type='Return', children_count=2, attributes={}, context='return')",
          "ASTNodeInfo(node_type='ListComp', line=274, column=19, parent_type='Return', children_count=2, attributes={}, context='return')",
          "ASTNodeInfo(node_type='ListComp', line=283, column=29, parent_type='Call', children_count=2, attributes={}, context='call')",
          "ASTNodeInfo(node_type='ListComp', line=284, column=25, parent_type='Call', children_count=2, attributes={}, context='call')",
          "ASTNodeInfo(node_type='DictComp', line=318, column=31, parent_type='Dict', children_count=3, attributes={}, context='dict')",
          "ASTNodeInfo(node_type='DictComp', line=323, column=33, parent_type='Dict', children_count=3, attributes={}, context='dict')"
        ]
      },
      "complexity_metrics": {
        "cyclomatic": 36,
        "max_nesting": 4
      },
      "max_depth": 14,
      "node_type_counts": {
        "Module": 1,
        "Expr": 24,
        "Constant": 188,
        "Import": 6,
        "alias": 22,
        "ImportFrom": 4,
        "Assign": 30,
        "Name": 366,
        "Store": 70,
        "Call": 92,
        "Load": 403,
        "ClassDef": 4,
        "FunctionDef": 23,
        "arguments": 23,
        "arg": 34,
        "Tuple": 21,
        "Subscript": 39,
        "AnnAssign": 4,
        "Attribute": 40,
        "Dict": 16,
        "List": 6,
        "Return": 28,
        "For": 8,
        "Try": 4,
        "ExceptHandler": 4,
        "JoinedStr": 6,
        "FormattedValue": 6,
        "Continue": 1,
        "If": 18,
        "Yield": 1,
        "UnaryOp": 5,
        "Not": 4,
        "Compare": 19,
        "Gt": 8,
        "IsNot": 3,
        "BinOp": 15,
        "Add": 7,
        "BoolOp": 6,
        "And": 4,
        "Slice": 2,
        "Starred": 1,
        "keyword": 5,
        "DictComp": 4,
        "comprehension": 14,
        "ListComp": 7,
        "Lt": 1,
        "Mult": 8,
        "Raise": 3,
        "Or": 2,
        "IfExp": 3,
        "Eq": 4,
        "SetComp": 1,
        "AugAssign": 3,
        "NotIn": 1,
        "In": 1,
        "Div": 2,
        "GeneratorExp": 2,
        "With": 1,
        "withitem": 1,
        "Mod": 1,
        "USub": 1,
        "NotEq": 1
      }
    }
  }
}