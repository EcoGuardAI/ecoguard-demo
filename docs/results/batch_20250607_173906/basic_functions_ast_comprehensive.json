{
  "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/simple/basic_functions.py",
  "analysis_time": "2025-06-07T21:39:08.552093+00:00",
  "summary": {
    "total_issues": 1,
    "critical": 0,
    "error": 0,
    "warning": 0,
    "info": 1,
    "green_score": 95.0,
    "security_score": 100.0
  },
  "issues": [
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/simple/basic_functions.py",
      "line": 23,
      "column": 11,
      "end_line": 23,
      "end_column": 50,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.551088+00:00"
    }
  ],
  "metadata": {
    "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/simple/basic_functions.py",
    "file_size": 911,
    "line_count": 30,
    "ast_research": {
      "patterns": {
        "function_def": [
          "ASTNodeInfo(node_type='FunctionDef', line=7, column=0, parent_type='Module', children_count=5, attributes={'name': 'greet', 'param_count': 1, 'body_length': 3}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=13, column=0, parent_type='Module', children_count=4, attributes={'name': 'calculate_sum', 'param_count': 1, 'body_length': 2}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=17, column=0, parent_type='Module', children_count=4, attributes={'name': 'is_even', 'param_count': 1, 'body_length': 2}, context='module')",
          "ASTNodeInfo(node_type='FunctionDef', line=21, column=0, parent_type='Module', children_count=4, attributes={'name': 'process_data', 'param_count': 1, 'body_length': 2}, context='module')"
        ],
        "class_def": [],
        "import": [],
        "loop": [],
        "comprehension": [
          "ASTNodeInfo(node_type='ListComp', line=23, column=11, parent_type='Return', children_count=2, attributes={}, context='return')"
        ]
      },
      "complexity_metrics": {
        "cyclomatic": 2,
        "max_nesting": 0
      },
      "max_depth": 8,
      "node_type_counts": {
        "Module": 1,
        "Expr": 9,
        "Constant": 22,
        "FunctionDef": 4,
        "arguments": 4,
        "arg": 4,
        "Name": 29,
        "Load": 34,
        "If": 2,
        "UnaryOp": 1,
        "Not": 1,
        "Return": 5,
        "JoinedStr": 1,
        "FormattedValue": 1,
        "Subscript": 3,
        "Call": 10,
        "Compare": 2,
        "BinOp": 1,
        "Mod": 1,
        "Eq": 2,
        "ListComp": 1,
        "Attribute": 1,
        "comprehension": 1,
        "Store": 1,
        "List": 2
      }
    }
  }
}