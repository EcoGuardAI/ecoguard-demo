{
  "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/simple/basic_functions.py",
  "analysis_time": "2025-06-07T21:39:06.850932+00:00",
  "summary": {
    "total_issues": 1,
    "critical": 0,
    "error": 0,
    "warning": 0,
    "info": 1,
    "green_score": 95.0,
    "security_score": 100.0
  },
  "issues": [
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/simple/basic_functions.py",
      "line": 23,
      "column": 11,
      "end_line": 23,
      "end_column": 50,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:06.850062+00:00"
    }
  ],
  "metadata": {
    "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/simple/basic_functions.py",
    "file_size": 911,
    "line_count": 30
  }
}