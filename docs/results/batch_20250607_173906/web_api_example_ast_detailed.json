{
  "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
  "analysis_time": "2025-06-07T21:39:08.468452+00:00",
  "summary": {
    "total_issues": 9,
    "critical": 0,
    "error": 0,
    "warning": 7,
    "info": 2,
    "green_score": 70.0,
    "security_score": 100.0
  },
  "issues": [
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 137,
      "column": 26,
      "end_line": 137,
      "end_column": 30,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.459226+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 150,
      "column": 21,
      "end_line": 150,
      "end_column": 25,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.459422+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 168,
      "column": 35,
      "end_line": 168,
      "end_column": 39,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.459539+00:00"
    },
    {
      "rule_id": "function_complexity",
      "category": "quality",
      "severity": "warning",
      "message": "Function 'process_user_request' has complexity 11 (max: 10)",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 102,
      "column": 4,
      "end_line": 135,
      "end_column": 51,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Consider breaking this function into smaller functions",
        "replacement_code": "# Refactor into smaller, more focused functions",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.3,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.8,
        "cost_impact": 0.0
      },
      "rule_name": "High Function Complexity",
      "rule_description": "Function has high cyclomatic complexity",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.461022+00:00"
    },
    {
      "rule_id": "inefficient_string_concat",
      "category": "green",
      "severity": "warning",
      "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 183,
      "column": 20,
      "end_line": 183,
      "end_column": 41,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use ''.join() for concatenating strings in loops",
        "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.15,
        "security_risk": 0.0,
        "carbon_impact": 5.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Inefficient String Concatenation",
      "rule_description": "String concatenation in loop is inefficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.462758+00:00"
    },
    {
      "rule_id": "inefficient_string_concat",
      "category": "green",
      "severity": "warning",
      "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 184,
      "column": 16,
      "end_line": 184,
      "end_column": 51,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use ''.join() for concatenating strings in loops",
        "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.15,
        "security_risk": 0.0,
        "carbon_impact": 5.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Inefficient String Concatenation",
      "rule_description": "String concatenation in loop is inefficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.462766+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 42,
      "column": 24,
      "end_line": 42,
      "end_column": 62,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.463524+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 50,
      "column": 24,
      "end_line": 50,
      "end_column": 62,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.463570+00:00"
    },
    {
      "rule_id": "duplicate_function",
      "category": "ai_code",
      "severity": "warning",
      "message": "Function 'get_user_by_id' appears similar to 'safe_get_user_by_email'",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
      "line": 35,
      "column": 4,
      "end_line": 42,
      "end_column": 92,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Consider extracting common logic into a shared function",
        "replacement_code": "# Extract common patterns into reusable functions",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.05,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.8,
        "cost_impact": 0.0
      },
      "rule_name": "Potential Duplicate Function",
      "rule_description": "Function appears similar to another function",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:08.467150+00:00"
    }
  ],
  "metadata": {
    "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/real-world/web_api_example.py",
    "file_size": 8011,
    "line_count": 207,
    "ast_research": {
      "patterns": {
        "function_def": [
          "ASTNodeInfo(node_type='FunctionDef', line=22, column=4, parent_type='ClassDef', children_count=3, attributes={'name': '__init__', 'param_count': 2, 'body_length': 2}, context='class:DatabaseManager')",
          "ASTNodeInfo(node_type='FunctionDef', line=26, column=4, parent_type='ClassDef', children_count=3, attributes={'name': 'connect', 'param_count': 1, 'body_length': 2}, context='class:DatabaseManager')",
          "ASTNodeInfo(node_type='FunctionDef', line=35, column=4, parent_type='ClassDef', children_count=8, attributes={'name': 'get_user_by_id', 'param_count': 2, 'body_length': 6}, context='class:DatabaseManager')",
          "ASTNodeInfo(node_type='FunctionDef', line=44, column=4, parent_type='ClassDef', children_count=8, attributes={'name': 'safe_get_user_by_email', 'param_count': 2, 'body_length': 6}, context='class:DatabaseManager')",
          "ASTNodeInfo(node_type='FunctionDef', line=52, column=4, parent_type='ClassDef', children_count=7, attributes={'name': 'create_user', 'param_count': 2, 'body_length': 5}, context='class:DatabaseManager')",
          "ASTNodeInfo(node_type='FunctionDef', line=76, column=4, parent_type='ClassDef', children_count=3, attributes={'name': '__init__', 'param_count': 2, 'body_length': 2}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=80, column=4, parent_type='ClassDef', children_count=10, attributes={'name': 'authenticate_user', 'param_count': 3, 'body_length': 8}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=102, column=4, parent_type='ClassDef', children_count=4, attributes={'name': 'process_user_request', 'param_count': 2, 'body_length': 2}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=137, column=4, parent_type='ClassDef', children_count=7, attributes={'name': '_update_user_data', 'param_count': 3, 'body_length': 5}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=150, column=4, parent_type='ClassDef', children_count=5, attributes={'name': '_delete_user', 'param_count': 2, 'body_length': 3}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=155, column=4, parent_type='ClassDef', children_count=6, attributes={'name': 'bulk_process_users', 'param_count': 2, 'body_length': 4}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=168, column=4, parent_type='ClassDef', children_count=8, attributes={'name': '_expensive_user_processing', 'param_count': 2, 'body_length': 6}, context='class:APIEndpoints')",
          "ASTNodeInfo(node_type='FunctionDef', line=189, column=0, parent_type='Module', children_count=8, attributes={'name': 'main', 'param_count': 0, 'body_length': 7}, context='module')"
        ],
        "class_def": [
          "ASTNodeInfo(node_type='ClassDef', line=19, column=0, parent_type='Module', children_count=6, attributes={'name': 'DatabaseManager', 'body_length': 6}, context='module')",
          "ASTNodeInfo(node_type='ClassDef', line=73, column=0, parent_type='Module', children_count=8, attributes={'name': 'APIEndpoints', 'body_length': 8}, context='module')"
        ],
        "import": [
          "ASTNodeInfo(node_type='Import', line=8, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=9, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=10, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=11, column=0, parent_type='Module', children_count=1, attributes={}, context='module')",
          "ASTNodeInfo(node_type='ImportFrom', line=12, column=0, parent_type='Module', children_count=4, attributes={}, context='module')",
          "ASTNodeInfo(node_type='Import', line=13, column=0, parent_type='Module', children_count=1, attributes={}, context='module')"
        ],
        "loop": [
          "ASTNodeInfo(node_type='For', line=141, column=8, parent_type='FunctionDef', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='function:_update_user_data')",
          "ASTNodeInfo(node_type='For', line=144, column=8, parent_type='FunctionDef', children_count=3, attributes={'body_length': 1, 'has_else': False}, context='function:_update_user_data')",
          "ASTNodeInfo(node_type='For', line=158, column=8, parent_type='FunctionDef', children_count=4, attributes={'body_length': 2, 'has_else': False}, context='function:bulk_process_users')",
          "ASTNodeInfo(node_type='For', line=181, column=12, parent_type='If', children_count=4, attributes={'body_length': 2, 'has_else': False}, context='control_flow:if')"
        ],
        "comprehension": [
          "ASTNodeInfo(node_type='ListComp', line=42, column=24, parent_type='Call', children_count=2, attributes={}, context='call')",
          "ASTNodeInfo(node_type='ListComp', line=50, column=24, parent_type='Call', children_count=2, attributes={}, context='call')"
        ]
      }
    }
  }
}