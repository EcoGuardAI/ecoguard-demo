{
  "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
  "analysis_time": "2025-06-07T21:39:07.120436+00:00",
  "summary": {
    "total_issues": 19,
    "critical": 0,
    "error": 0,
    "warning": 7,
    "info": 12,
    "green_score": 55.0,
    "security_score": 100.0
  },
  "issues": [
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 35,
      "column": 19,
      "end_line": 35,
      "end_column": 23,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.110360+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 50,
      "column": 19,
      "end_line": 50,
      "end_column": 23,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.110565+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'self' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 61,
      "column": 28,
      "end_line": 61,
      "end_column": 32,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'self' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _self",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.110710+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'content' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 122,
      "column": 8,
      "end_line": 122,
      "end_column": 15,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'content' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _content",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.110944+00:00"
    },
    {
      "rule_id": "unused_variable",
      "category": "quality",
      "severity": "warning",
      "message": "Variable 'func' is defined but never used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 160,
      "column": 24,
      "end_line": 160,
      "end_column": 28,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused variable 'func' or prefix with underscore if intentional",
        "replacement_code": "# Remove line or rename to _func",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Variable",
      "rule_description": "Variable is defined but never used",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111000+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'os' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 6,
      "column": 0,
      "end_line": 6,
      "end_column": 9,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'os'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111843+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'sys' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 7,
      "column": 0,
      "end_line": 7,
      "end_column": 10,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'sys'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111848+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'json' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 8,
      "column": 0,
      "end_line": 8,
      "end_column": 11,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'json'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111851+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'itertools' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 9,
      "column": 0,
      "end_line": 9,
      "end_column": 16,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'itertools'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111854+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'defaultdict' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 11,
      "column": 0,
      "end_line": 11,
      "end_column": 44,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'defaultdict'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111857+00:00"
    },
    {
      "rule_id": "unused_import",
      "category": "quality",
      "severity": "info",
      "message": "Import 'Counter' is not used",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 11,
      "column": 0,
      "end_line": 11,
      "end_column": 44,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Remove unused import 'Counter'",
        "replacement_code": "# Remove import line",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": -0.2,
        "cost_impact": 0.0
      },
      "rule_name": "Unused Import",
      "rule_description": "Import statement is not used in the module",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.111860+00:00"
    },
    {
      "rule_id": "inefficient_string_concat",
      "category": "green",
      "severity": "warning",
      "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 148,
      "column": 8,
      "end_line": 148,
      "end_column": 20,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use ''.join() for concatenating strings in loops",
        "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.15,
        "security_risk": 0.0,
        "carbon_impact": 5.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Inefficient String Concatenation",
      "rule_description": "String concatenation in loop is inefficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.114375+00:00"
    },
    {
      "rule_id": "inefficient_string_concat",
      "category": "green",
      "severity": "warning",
      "message": "String concatenation in loop is inefficient. Use join() or f-strings instead",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 150,
      "column": 12,
      "end_line": 150,
      "end_column": 29,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use ''.join() for concatenating strings in loops",
        "replacement_code": "# Use parts = []; parts.append(item); result = ''.join(parts)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.15,
        "security_risk": 0.0,
        "carbon_impact": 5.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Inefficient String Concatenation",
      "rule_description": "String concatenation in loop is inefficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.114389+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 59,
      "column": 15,
      "end_line": 59,
      "end_column": 73,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.115361+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 89,
      "column": 18,
      "end_line": 89,
      "end_column": 77,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.115483+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 101,
      "column": 24,
      "end_line": 105,
      "end_column": 5,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.115532+00:00"
    },
    {
      "rule_id": "use_generator",
      "category": "green",
      "severity": "info",
      "message": "Consider using generator expression instead of list comprehension for single use",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 102,
      "column": 8,
      "end_line": 102,
      "end_column": 59,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Replace [] with () to create generator",
        "replacement_code": "# Change [expr for item in iterable] to (expr for item in iterable)",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.1,
        "security_risk": 0.0,
        "carbon_impact": 2.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "Use Generator Expression",
      "rule_description": "Consider using generator for memory efficiency",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.115535+00:00"
    },
    {
      "rule_id": "file_handling_efficiency",
      "category": "green",
      "severity": "info",
      "message": "Use 'with open()' for automatic file closing",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 119,
      "column": 13,
      "end_line": 119,
      "end_column": 37,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Use context manager (with statement) for file handling",
        "replacement_code": "# with open(filename) as f:",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.05,
        "security_risk": 0.0,
        "carbon_impact": 1.0,
        "maintainability": 0.0,
        "cost_impact": 0.0
      },
      "rule_name": "File Handling Efficiency",
      "rule_description": "File handling could be more efficient",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.116218+00:00"
    },
    {
      "rule_id": "verbose_ai_code",
      "category": "ai_code",
      "severity": "info",
      "message": "Redundant nested if statements can be combined with 'and'",
      "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
      "line": 74,
      "column": 20,
      "end_line": 76,
      "end_column": 46,
      "description": null,
      "code_snippet": null,
      "suggested_fix": {
        "description": "Combine conditions with 'and' operator",
        "replacement_code": "# if condition1 and condition2:",
        "can_auto_fix": false,
        "confidence": 0.0,
        "instructions": null
      },
      "impact": {
        "performance": -0.05,
        "security_risk": 0.0,
        "carbon_impact": 0.0,
        "maintainability": 0.5,
        "cost_impact": 0.0
      },
      "rule_name": "Verbose AI-Generated Code",
      "rule_description": "Code pattern appears verbose and could be simplified",
      "references": [],
      "tags": [],
      "ai_generated": false,
      "ai_confidence": null,
      "created_at": "2025-06-07T21:39:07.117333+00:00"
    }
  ],
  "metadata": {
    "file_path": "/Users/dhruv/code/ecoguard-demo/sample-code/complex/ast_showcase.py",
    "file_size": 6308,
    "line_count": 232
  }
}